name: pars_tests_UI

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–µ–≥–æ workflow
on: 
  workflow_dispatch:
  # push:
  #   branches: [ main, master ]
  # pull_request:
  #   branches: [ main, master ]
  schedule:
    - cron: '0 7 * * *'    
    # - cron: '0 14 * * *'

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ó–∞–¥–∞—á–∏(job)
jobs:
  # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
  tests:
    timeout-minutes: 60

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –î–∂–æ–±—ã –≤—Å—Ç–∞–≤–∞–ª –≤ –æ–∂–∏–¥–∞–Ω–∏–µ, –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–∞—è —Å –ø–µ—Ä–≤—ã–º
    concurrency: pars_tests_UI_concurrency

    # –∑–∞–ø—É—Å–∫ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'schedule' && (github.event.schedule == '0 7 * * *' || github.event.schedule == '0 14 * * *'))
    runs-on: ubuntu-latest
    env:
      ADMIN_BUYER_EMAIL: ${{ secrets.ADMIN_BUYER_EMAIL }}

    steps:

      # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      - uses: actions/checkout@v4

      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.1'

      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤
      - name: Ensure browsers are installed
        run: python -m playwright install --with-deps

      # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      - name: Run tests
        run: |
          pytest --reruns 2 --reruns-delay 3 --alluredir=allure-results
          
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è json-—Ñ–∞–π–ª–æ–≤ –≤ allure-results (—á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—à–∏—Ç—å —Å–ª–æ–º–∞–Ω—ã–π –æ—Ç—á–µ—Ç)
      - name: Check if Allure results exist
        if: always()
        id: check_allure
        run: |
          if [ -d allure-results ] && [ "$(ls -A allure-results/*.json 2>/dev/null)" ]; then
            echo "allure_results_exist=true" >> $GITHUB_OUTPUT
          else
            echo "allure_results_exist=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Debug allure_results_exist
        if: always()
        run: echo "allure_results_exist=${{ steps.check_allure.outputs.allure_results_exist }}"

      # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always() && steps.check_allure.outputs.allure_results_exist == 'true'
        with:
          name: allure-results-main-${{ github.run_id }}
          path: allure-results/
          # retention_days: 10

      # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≥–æ–Ω–æ–≤ Allure
      - name: Get Allure history
        uses: actions/checkout@v4
        if: always() && steps.check_allure.outputs.allure_results_exist == 'true'
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≥–æ–Ω–æ–≤
      - name: Generate Allure report
        uses: simple-elf/allure-report-action@master
        if: always() && steps.check_allure.outputs.allure_results_exist == 'true'
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history

      # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ Allure  
      - name: Publish Allure report
        uses: peaceiris/actions-gh-pages@v2
        if: always() && steps.check_allure.outputs.allure_results_exist == 'true'
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history

      - name: Upload prices.csv artifact
        uses: actions/upload-artifact@v4
        with:
          name: prices
          path: prices.csv

  notify-on-failure:
    if: |
     (failure()) ||
     (needs.test.result == 'error') ||
     (contains(needs.*.result, 'error'))
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Send failure email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: "‚ùå GitHub Actions FAILED in ${{ github.repository }}"
          body: |
           ‚ùó Workflow [${{ github.workflow }}] failed.

            üîó View it here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            üì¶ Commit: ${{ github.sha }}
            üë§ Triggered by: ${{ github.actor }}
          to: urin.a@garagetools.ru,timofeev.a@garagetools.ru
          from: GitHub Actions <${{ secrets.GMAIL_USERNAME }}>

  notify-on-success:
    if: success()
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: prices
          path: .
      - name: Send success email with prices.csv
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: "‚úîÔ∏è GitHub Actions PASSED: Prices CSV"
          body: |
            ‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.
    
            üì¶ Commit: ${{ github.sha }}
            üë§ Triggered by: ${{ github.actor }}
          to: urin.a@garagetools.ru,timofeev.a@garagetools.ru
          from: GitHub Actions <${{ secrets.GMAIL_USERNAME }}>
          attachments: prices.csv
